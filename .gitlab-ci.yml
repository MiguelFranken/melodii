image: docker:latest
services:
  - docker:18.09.7-dind

variables:
  USERNAME: $DOCKER_USERNAME
  PASSWORD: $DOCKER_PASSWORD

cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - Server/node_modules/
    - Frontend/node_modules/
    - Generator/node_modules/

stages:
  - install_packages
  - build
  - lint
  - test
  - package
  - deploy

#install_packages:
#  image: nikolaik/python-nodejs:latest
#  stage: install_packages
#  script:
#    - cd Server
#    - npm ci
#    - cd ../Frontend
#    - npm ci
#    - cd ../Generator
#    - npm ci
#  tags:
#    - docker
#
#build:tone-generator:
#  image: nikolaik/python-nodejs:latest
#  stage: build
#  script:
#    - cd Generator
#    - npm run build
#  artifacts:
#    expire_in: 1 day
#    paths:
#      - Generator/dist/
#  tags:
#    - docker
#
#build:frontend:
#  image: trion/ng-cli
#  stage: build
#  before_script:
#    - cd Frontend
#  script:
#    - ng build --prod
#  artifacts:
#    expire_in: 1 day
#    paths:
#      - Frontend/dist/
#  tags:
#    - docker
#
#build:osc-server:
#  image: nikolaik/python-nodejs:latest
#  stage: build
#  before_script:
#    - cd Server
#  script:
#    - npm run build
#  artifacts:
#    expire_in: 1 day
#    paths:
#      - Server/dist/
#  tags:
#    - docker
#
#lint:frontend:
#  image: trion/ng-cli
#  allow_failure: true
#  before_script:
#    - cd Frontend
#  stage: lint
#  script:
#    - ng lint
#  tags:
#    - docker
#
#lint:tone-generator:
#  image: nikolaik/python-nodejs:latest
#  allow_failure: true # todo: set this to false asap ci works
#  before_script:
#    - cd Generator
#  stage: lint
#  script:
#    - npm run lint
#  tags:
#    - docker
#
#lint:osc-server:
#  image: nikolaik/python-nodejs:latest
#  allow_failure: true
#  before_script:
#    - cd Server
#  stage: lint
#  script:
#    - npm run lint
#  tags:
#    - docker
#
#test:frontend:karma:
#  image: trion/ng-cli-karma
#  stage: test
#  allow_failure: true # todo: set to false
#  before_script:
#    - cd Frontend
#  script:
#    - ng test --code-coverage --progress false --watch false
#  coverage: '/Lines \W+: (\d+\.\d+)%.*/'
#  artifacts:
#    paths:
#      - Frontend/coverage/
#  tags:
#    - docker

package:master:
  stage: package
  script:
    - docker build --build-arg frontend-build-command="master" -t $DOCKER_USERNAME/mcp-master .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_USERNAME/mcp-master
  tags:
    - docker
#  only:
#    - master

deploy:master:
  image: node:12.13
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y  )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_MASTER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@$SERVER_MASTER_IP "./deploy.sh $USERNAME '$PASSWORD' master"
#  only:
#    - master

package:dev:
  stage: package
  script:
    - docker build --build-arg frontend-build-command="dev" -t $DOCKER_USERNAME/mcp-dev .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_USERNAME/mcp-dev
  tags:
    - docker
#  only:
#    - dev

deploy:dev:
  image: node:12.13
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y  )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_DEV_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@$SERVER_DEV_IP "./deploy.sh $USERNAME '$PASSWORD' dev"
#  only:
#    - dev
