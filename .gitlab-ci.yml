image: docker:latest
services:
  - docker:18.09.7-dind

variables:
  USERNAME: $DOCKER_USERNAME
  PASSWORD: $DOCKER_PASSWORD

cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - Server/node_modules/
    - Frontend/node_modules/
    - Client/node_modules/

stages:
  - install_packages
  - build
  - lint
  - test
  - package
  - deploy

install_packages:
  image: nikolaik/python-nodejs:latest
  stage: install_packages
  script:
    - cd Server
    - npm ci
    - cd ../Frontend
    - npm ci
    - cd ../Client
    - npm ci
  tags:
    - docker

build:frontend:
  image: trion/ng-cli
  stage: build
  before_script:
    - cd Frontend
  script:
    - npm run build:local # TODO: Bessere LÃ¶sung notwendig
  artifacts:
    expire_in: 1 day
    paths:
      - Frontend/dist/
  tags:
    - docker

build:server:
  image: nikolaik/python-nodejs:latest
  stage: build
  before_script:
    - cd Server
  script:
    - npm run build
  artifacts:
    expire_in: 1 day
    paths:
      - Server/dist/
  tags:
    - docker

build:client:
  image: nikolaik/python-nodejs:latest
  stage: build
  before_script:
    - cd Client
  script:
    - npm run build
  artifacts:
    expire_in: 1 day
    paths:
      - Client/dist/
  tags:
    - docker

lint:frontend:
  image: trion/ng-cli
  allow_failure: true
  before_script:
    - cd Frontend
  stage: lint
  script:
    - ng lint
  tags:
    - docker

lint:server:
  image: nikolaik/python-nodejs:latest
  allow_failure: true
  before_script:
    - cd Server
  stage: lint
  script:
    - npm run lint
  tags:
    - docker

lint:client:
  image: nikolaik/python-nodejs:latest
  allow_failure: true
  before_script:
    - cd Client
  stage: lint
  script:
    - npm run lint
  tags:
    - docker

#test:frontend:karma:
#  image: trion/ng-cli-karma
#  stage: test
#  allow_failure: false
#  before_script:
#    - cd Frontend
#  script:
#    - ng test --code-coverage --progress false --watch false
#  coverage: '/Lines \W+: (\d+\.\d+)%.*/'
#  artifacts:
#    paths:
#      - Frontend/coverage/
#  tags:
#    - docker

package:master:web:
  stage: package
  script:
    - cd Frontend
    - docker build --build-arg branch="master" -t $DOCKER_USERNAME/mcp-master .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_USERNAME/mcp-master
  tags:
    - docker
  only:
    - master

#package:pi:web:
#  stage: package
#  script:
#    - docker build --build-arg branch="local" -t $DOCKER_USERNAME/mcp-pi .
#    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#    - docker push $DOCKER_USERNAME/mcp-pi
#  tags:
#    - docker
#  only:
#    - dev

package:master:server:
  stage: package
  script:
    - cd Server
    - docker build -t $DOCKER_USERNAME/mcp-server-master .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_USERNAME/mcp-server-master
  tags:
    - docker
  only:
    - master

#package:pi:server:
#  stage: package
#  script:
#    - cd Server
#    - docker build -t $DOCKER_USERNAME/mcp-server-pi .
#    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#    - docker push $DOCKER_USERNAME/mcp-server-pi
#  tags:
#    - docker
#  only:
#    - dev

deploy:master:
  image: node:12.13
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y  )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_MASTER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@$SERVER_MASTER_IP "./deploy.sh $USERNAME '$PASSWORD' master"
  only:
    - master

package:dev:web:
  stage: package
  script:
    - cd Frontend
    - docker build --build-arg branch="dev" -t $DOCKER_USERNAME/mcp-dev .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_USERNAME/mcp-dev
  tags:
    - docker
  only:
    - dev

package:dev:server:
  stage: package
  script:
    - cd Server
    - docker build -t $DOCKER_USERNAME/mcp-server-dev .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_USERNAME/mcp-server-dev
  tags:
    - docker
  only:
    - dev

deploy:dev:
  image: node:12.13
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y  )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_DEV_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@$SERVER_DEV_IP "./deploy.sh $USERNAME '$PASSWORD' dev"
  only:
    - dev
